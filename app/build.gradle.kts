/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.serialization)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation(libs.kotlin.junit5)

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)
    testImplementation(libs.junit.jupiter.params)

    // MockK for mocking
    testImplementation(libs.mockk)

    // Cucumber with JUnit engine for larger, flow tests.
    testImplementation(libs.cucumber.java)
    testImplementation(libs.cucumber.junit)

    testRuntimeOnly(libs.junit.platform)

    // This dependency is used by the application.
    implementation(libs.guava)

    // Easy logger with SLF4J backed.
    implementation(libs.kotlin.logging.jvm)
    implementation(libs.slf4j.simple)

    // Serialization
    implementation(libs.kotlinx.serialization)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.exeval.AppKt"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    testLogging {
        if (PropertyTestOutput(project).value == PropertyTestOutput.AllowedValues.FULL) {
            events("passed", "failed", "skipped")
        }
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
    }

    finalizedBy("cucumberTest")
}

sourceSets["main"].java {
    srcDir("build/generated/out/kotlin")
}

configurations.register("cucumberRuntime") {
    extendsFrom(configurations["testImplementation"])
}

tasks.register<Test>("cucumberTest") {
    onlyIf {
        tasks.named("test").get().state.failure == null
    }
    group = "verification"
    description = "Runs compiler flow tests on example programs."
    dependsOn("assemble", "testClasses")
    val tagsProperty = PropertyCucumberTags(project)
    val tags = if (tagsProperty.isSet) tagsProperty.value else "not @notImplemented"
    doLast {
        javaexec {
            mainClass = "io.cucumber.core.cli.Main"
            classpath = configurations["cucumberRuntime"] + sourceSets["main"].output + sourceSets["test"].output
            args = listOf(
                "--plugin", if (PropertyTestOutput(project).value == PropertyTestOutput.AllowedValues.FULL) {
                    "pretty"
                } else {
                    "summary"
                }, "--plugin", "html:build/reports/cucumber-report.html", "--tags", tags
            )
        }
    }
}

/* Their value can be specified on the command line with
 * -P<propertyName>="<property_value>"
 */
sealed class AdditionalProperties<ValueType>(
    project: Project, val propertyName: String
) {
    val isSet: Boolean = project.hasProperty(propertyName)

    abstract val value: ValueType
}

class PropertyCucumberTags(project: Project) : AdditionalProperties<String>(project, "cucumberTags") {
    override val value: String = if (isSet) project.property(propertyName) as String else ""
}

class PropertyTestOutput(project: Project) :
    AdditionalProperties<PropertyTestOutput.AllowedValues>(project, "testOutput") {
    override val value: AllowedValues
    private val default = AllowedValues.FAILURES

    init {
        value = if (isSet) {
            val propValue = project.property(propertyName) as String
            val converted = AllowedValues.values().firstOrNull { it.value == propValue }
            if (converted == null) {
                val allowed = AllowedValues.values().joinToString(separator = ", ") { it.value }
                project.logger.warn("[WARNING] Unknown value '${propValue}' of property '${propertyName}'. Allowed values: [${allowed}]. Using default '${default.value}'")
                default
            } else converted
        } else default
    }


    enum class AllowedValues(val value: String) {
        FULL("full"), FAILURES("failures")
    }
}
